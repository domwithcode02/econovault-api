version: 0.2

env:
  variables:
    PYTHON_VERSION: "3.11"
    DOCKER_BUILDKIT: "1"
    COMPOSE_DOCKER_CLI_BUILD: "1"
  parameter-store:
    DB_PASSWORD: "/econovault/${ENVIRONMENT}/database/password"
    API_SECRET_KEY: "/econovault/${ENVIRONMENT}/api/secret_key"
    JWT_SECRET: "/econovault/${ENVIRONMENT}/auth/jwt_secret"
    BLS_API_KEY: "/econovault/${ENVIRONMENT}/api/bls_key"
    BEA_API_KEY: "/econovault/${ENVIRONMENT}/api/bea_key"
    FRED_API_KEY: "/econovault/${ENVIRONMENT}/api/fred_key"
  secrets-manager:
    SSL_CERTIFICATE: "econovault-ssl-cert:${ENVIRONMENT}:AWSCURRENT"
    SSL_PRIVATE_KEY: "econovault-ssl-key:${ENVIRONMENT}:AWSCURRENT"
  exported-variables:
    - IMAGE_URI
    - IMAGE_TAG
    - VULNERABILITY_COUNT

phases:
  install:
    runtime-versions:
      python: ${PYTHON_VERSION}
      docker: 20
    commands:
      - echo "Installing security tools and dependencies..."
      - pip install --upgrade pip
      - pip install safety bandit semgrep
      - docker --version
      - python --version

  pre_build:
    commands:
      - echo "Starting security scanning and pre-build checks..."
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:-latest}
      - REPOSITORY_URI=${ECR_REPOSITORY_URI}
      
      # Security vulnerability scanning
      - echo "Running dependency vulnerability scan..."
      - safety check --json --output safety-report.json || true
      
      # Static code analysis
      - echo "Running static code analysis with Bandit..."
      - bandit -r ./backend -f json -o bandit-report.json || true
      
      # Code quality checks
      - echo "Running Semgrep security rules..."
      - semgrep --config=auto --json --output=semgrep-report.json ./backend || true
      
      # Login to ECR
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      
      # Create vulnerability summary
      - VULNERABILITY_COUNT=$(cat safety-report.json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
      - echo "Found $VULNERABILITY_COUNT vulnerabilities"

  build:
    commands:
      - echo "Building Docker image with multi-stage build..."
      - echo "Build started on $(date)"
      
      # Build with security scanning
      - docker build 
        --build-arg PYTHON_VERSION=${PYTHON_VERSION}
        --build-arg ENVIRONMENT=${ENVIRONMENT}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg VCS_REF=${CODEBUILD_RESOLVED_SOURCE_VERSION}
        --tag $REPOSITORY_URI:latest
        --tag $REPOSITORY_URI:$IMAGE_TAG
        --file backend/Dockerfile .
      
      # Scan image for vulnerabilities
      - echo "Scanning Docker image for vulnerabilities..."
      - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
        -v $(pwd):/tmp aquasec/trivy image 
        --format json --output /tmp/trivy-report.json 
        $REPOSITORY_URI:$IMAGE_TAG || true
      
      # Run container security tests
      - echo "Running container security validation..."
      - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
        -v $(pwd):/tmp aquasec/trivy config /tmp/backend/Dockerfile || true

  post_build:
    commands:
      - echo "Post-build phase started..."
      
      # Push images to ECR
      - echo "Pushing Docker images to ECR..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      
      # Create image definitions for ECS
      - echo "Creating image definitions file..."
      - printf '[{"name":"econovault-api","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      
      # Export variables for CodePipeline
      - export IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
      - export IMAGE_TAG=$IMAGE_TAG
      
      # Generate compliance report
      - echo "Generating compliance report..."
      - |
        cat > compliance-report.json << EOF
        {
          "build_id": "$CODEBUILD_BUILD_ID",
          "image_uri": "$REPOSITORY_URI:$IMAGE_TAG",
          "vulnerabilities": $(cat safety-report.json 2>/dev/null || echo '[]'),
          "static_analysis": $(cat bandit-report.json 2>/dev/null || echo '{}'),
          "container_scan": $(cat trivy-report.json 2>/dev/null || echo '{}'),
          "compliance_status": "$(if [ $VULNERABILITY_COUNT -gt 0 ]; then echo 'WARNING'; else echo 'PASS'; fi)"
        }
        EOF
      
      - echo "Build completed on $(date)"

reports:
  security-reports:
    files:
      - safety-report.json
      - bandit-report.json
      - semgrep-report.json
      - trivy-report.json
      - compliance-report.json
    file-format: JSON
    discard-paths: yes

artifacts:
  files:
    - imagedefinitions.json
    - compliance-report.json
    - safety-report.json
    - trivy-report.json
  name: econovault-build-$(date +%Y%m%d-%H%M%S)
  discard-paths: yes

cache:
  paths:
    - '/root/.cache/pip/**/*'
    - '/root/.docker/**/*'