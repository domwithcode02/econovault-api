AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Policies and Roles for EconoVault Financial API - SOC2/PCI DSS Compliance'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: "Environment name for resource naming"
  
  AccountId:
    Type: String
    Default: !Ref AWS::AccountId
    Description: "AWS Account ID"
  
  Region:
    Type: String
    Default: !Ref AWS::Region
    Description: "AWS Region"
  
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID for network restrictions"
  
  KMSKeyId:
    Type: String
    Description: "KMS Key ID for encryption"
  
  AuditAccountId:
    Type: String
    Default: ""
    Description: "External audit account ID for cross-account access"
  
  EnablePCICCompliance:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: "Enable PCI DSS compliance policies"

Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  HasAuditAccount: !Not [!Equals [!Ref AuditAccountId, ""]]
  EnablePCIC: !Equals [!Ref EnablePCICCompliance, "true"]

Resources:
  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "econovault-ecs-task-execution-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:ecs:${Region}:${AccountId}:task/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EconoVaultTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # ECR access for container images
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:RequestedRegion': !Ref Region
              
              # CloudWatch Logs access
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/ecs/econovault-*'
                  - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/ecs/econovault-*:*'
              
              # Secrets Manager access
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${Region}:${AccountId}:secret:econovault/*'
                  - !Sub 'arn:aws:secretsmanager:${Region}:${AccountId}:secret:financial-api/*'
                Condition:
                  StringEquals:
                    'secretsmanager:ResourceTag/Environment': !Ref Environment
                    'secretsmanager:ResourceTag/Application': 'econovault'
              
              # KMS access for encryption
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: !Sub 'arn:aws:kms:${Region}:${AccountId}:key/${KMSKeyId}'
                Condition:
                  StringEquals:
                    'kms:ViaService': !Sub 'secretsmanager.${Region}.amazonaws.com'

  # ECS Task Role for application permissions
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "econovault-ecs-task-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AccountId
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:ecs:${Region}:${AccountId}:task/*'
      Policies:
        - PolicyName: EconoVaultTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # S3 access for data storage
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::econovault-data-${Environment}'
                  - !Sub 'arn:aws:s3:::econovault-data-${Environment}/*'
                  - !Sub 'arn:aws:s3:::econovault-backups-${Environment}'
                  - !Sub 'arn:aws:s3:::econovault-backups-${Environment}/*'
                Condition:
                  StringEquals:
                    's3:x-amz-server-side-encryption': 'aws:kms'
                    's3:x-amz-server-side-encryption-aws-kms-key-id': !Sub 'arn:aws:kms:${Region}:${AccountId}:key/${KMSKeyId}'
                  StringEqualsIfExists:
                    's3:x-amz-acl': 'private'
              
              # DynamoDB access for session data
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !Sub 'arn:aws:dynamodb:${Region}:${AccountId}:table/econovault-sessions-${Environment}'
                  - !Sub 'arn:aws:dynamodb:${Region}:${AccountId}:table/econovault-sessions-${Environment}/index/*'
                  - !Sub 'arn:aws:dynamodb:${Region}:${AccountId}:table/econovault-cache-${Environment}'
                  - !Sub 'arn:aws:dynamodb:${Region}:${AccountId}:table/econovault-cache-${Environment}/index/*'
                Condition:
                  StringEquals:
                    'dynamodb:ResourceTag/Environment': !Ref Environment
              
              # RDS IAM authentication
              - Effect: Allow
                Action:
                  - 'rds-db:connect'
                Resource:
                  - !Sub 'arn:aws:rds-db:${Region}:${AccountId}:dbuser:*/*'
                Condition:
                  StringEquals:
                    'rds-db:ResourceTag/Environment': !Ref Environment
                    'rds-db:ResourceTag/Application': 'econovault'
              
              # ElastiCache Redis access
              - Effect: Allow
                Action:
                  - 'elasticache:DescribeCacheClusters'
                  - 'elasticache:DescribeCacheNodes'
                Resource: '*'
              
              # Parameter Store access
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource:
                  - !Sub 'arn:aws:ssm:${Region}:${AccountId}:parameter/econovault/${Environment}/*'
                  - !Sub 'arn:aws:ssm:${Region}:${AccountId}:parameter/financial-api/${Environment}/*'
                Condition:
                  StringEquals:
                    'ssm:ResourceTag/Environment': !Ref Environment

  # RDS Enhanced Monitoring Role
  RDSMonitoringRole:
    Type: AWS::IAM::Role
    Condition: IsProduction
    Properties:
      RoleName: !Sub "econovault-rds-monitoring-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  # Application Load Balancer Role
  ALBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "econovault-alb-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticloadbalancing.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticLoadBalancingServiceRolePolicy

  # Security Audit Role (Cross-account access)
  SecurityAuditRole:
    Type: AWS::IAM::Role
    Condition: HasAuditAccount
    Properties:
      RoleName: !Sub "econovault-security-audit-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AuditAccountId}:root'
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub 'econovault-audit-${Environment}-2024'
              IpAddress:
                'aws:SourceIp':
                  - '10.0.0.0/8'
                  - '172.16.0.0/12'
              DateGreaterThan:
                'aws:CurrentTime': '2024-01-01T00:00:00Z'
              DateLessThan:
                'aws:CurrentTime': '2025-01-01T00:00:00Z'
      Policies:
        - PolicyName: SecurityAuditPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Read-only access to security services
              - Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                  - 'cloudtrail:GetTrailStatus'
                  - 'cloudtrail:DescribeTrails'
                  - 'config:GetComplianceDetails'
                  - 'config:GetConfigRuleEvaluationStatus'
                  - 'securityhub:GetFindings'
                  - 'securityhub:DescribeHub'
                  - 'guardduty:GetFindings'
                  - 'guardduty:GetMasterAccount'
                  - 'wafv2:GetWebACL'
                  - 'wafv2:GetRuleGroup'
                  - 'wafv2:ListRuleGroups'
                  - 'wafv2:ListWebACLs'
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:RequestedRegion': !Ref Region
              
              # Read access to logs
              - Effect: Allow
                Action:
                  - 'logs:FilterLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/ecs/econovault-*'
                  - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/wafv2/econovault-*'
                  - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/vpc/flowlogs/econovault-*'
              
              # Read access to S3 buckets
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:GetBucketVersioning'
                  - 's3:GetBucketLogging'
                Resource:
                  - !Sub 'arn:aws:s3:::econovault-*'
                  - !Sub 'arn:aws:s3:::econovault-*/*'

  # PCI DSS Compliance Role (Conditional)
  PCIComplianceRole:
    Type: AWS::IAM::Role
    Condition: EnablePCIC
    Properties:
      RoleName: !Sub "econovault-pci-compliance-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: PCICompliancePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Cardholder data access (strictly controlled)
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::econovault-pci-data-${Environment}/*'
                Condition:
                  StringEquals:
                    's3:x-amz-server-side-encryption': 'aws:kms'
                    's3:x-amz-server-side-encryption-aws-kms-key-id': !Sub 'arn:aws:kms:${Region}:${AccountId}:key/${KMSKeyId}'
                  Bool:
                    'aws:MultiFactorAuthPresent': 'true'
              
              # KMS access for PCI data encryption
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource: !Sub 'arn:aws:kms:${Region}:${AccountId}:key/${KMSKeyId}'
                Condition:
                  StringEquals:
                    'kms:EncryptionContext:PCIData': 'true'
              
              # CloudWatch monitoring for PCI compliance
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'PCI/Compliance'

  # Service Control Policy (Organization level)
  FinancialServicesSCP:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "econovault-financial-services-scp-${Environment}"
      Description: "Service control policy for financial services compliance"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Deny non-encrypted resources
          - Sid: DenyNonEncryptedResources
            Effect: Deny
            Action:
              - 's3:CreateBucket'
              - 's3:PutObject'
              - 'rds:CreateDBInstance'
              - 'rds:CreateDBCluster'
              - 'rds:CreateDBSnapshot'
              - 'ec2:CreateVolume'
              - 'ec2:CreateSnapshot'
            Resource: '*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
                'rds:StorageEncrypted': 'true'
                'ec2:Encrypted': 'true'
          
          # Deny public S3 buckets
          - Sid: DenyPublicS3Buckets
            Effect: Deny
            Action:
              - 's3:PutBucketPolicy'
              - 's3:PutBucketAcl'
              - 's3:PutBucketPublicAccessBlock'
            Resource: '*'
            Condition:
              StringEquals:
                's3:x-amz-acl': ['public-read', 'public-read-write', 'authenticated-read']
          
          # Deny non-VPC access to sensitive resources
          - Sid: DenyNonVPCAccess
            Effect: Deny
            Action:
              - 's3:*'
              - 'rds:*'
              - 'ec2:*'
              - 'dynamodb:*'
              - 'elasticache:*'
            Resource: '*'
            Condition:
              StringNotEquals:
                'aws:SourceVpc': !Ref VPCId
          
          # Deny weak encryption algorithms
          - Sid: DenyWeakEncryption
            Effect: Deny
            Action:
              - 'kms:CreateKey'
              - 'kms:Encrypt'
            Resource: '*'
            Condition:
              StringNotEquals:
                'kms:KeyUsage': 'ENCRYPT_DECRYPT'
                'kms:KeySpec': 'SYMMETRIC_DEFAULT'
          
          # Deny access without MFA for sensitive operations
          - Sid: DenyAccessWithoutMFA
            Effect: Deny
            Action:
              - 'iam:CreateAccessKey'
              - 'iam:DeleteAccessKey'
              - 'iam:UpdateAccessKey'
              - 'secretsmanager:GetSecretValue'
              - 'kms:Decrypt'
              - 's3:GetObject'
            Resource: '*'
            Condition:
              BoolIfExists:
                'aws:MultiFactorAuthPresent': 'false'

  # IAM Policy for Security Team
  SecurityTeamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "econovault-security-team-${Environment}"
      Description: "Policy for security team access to financial services"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Security Hub access
          - Effect: Allow
            Action:
              - 'securityhub:*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region
          
          # GuardDuty access
          - Effect: Allow
            Action:
              - 'guardduty:*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region
          
          # WAF management
          - Effect: Allow
            Action:
              - 'wafv2:*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region
          
          # CloudTrail access
          - Effect: Allow
            Action:
              - 'cloudtrail:LookupEvents'
              - 'cloudtrail:GetTrailStatus'
              - 'cloudtrail:DescribeTrails'
              - 'cloudtrail:StartLogging'
              - 'cloudtrail:StopLogging'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region
          
          # Config access
          - Effect: Allow
            Action:
              - 'config:GetComplianceDetails'
              - 'config:GetConfigRuleEvaluationStatus'
              - 'config:DescribeConfigRules'
              - 'config:DescribeConfigurationRecorders'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region

  # IAM Policy for Developers (Limited Access)
  DeveloperPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "econovault-developers-${Environment}"
      Description: "Limited policy for developers with read-only access"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Read-only access to ECS
          - Effect: Allow
            Action:
              - 'ecs:Describe*'
              - 'ecs:List*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region
          
          # Read-only access to CloudWatch
          - Effect: Allow
            Action:
              - 'cloudwatch:Get*'
              - 'cloudwatch:List*'
              - 'cloudwatch:Describe*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref Region
          
          # Read-only access to logs
          - Effect: Allow
            Action:
              - 'logs:FilterLogEvents'
              - 'logs:GetLogEvents'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
            Resource:
              - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/ecs/econovault-*'
              - !Sub 'arn:aws:logs:${Region}:${AccountId}:log-group:/aws/ecs/econovault-*:*'
          
          # Read-only access to application metrics
          - Effect: Allow
            Action:
              - 'cloudwatch:GetMetricStatistics'
              - 'cloudwatch:ListMetrics'
            Resource: '*'
            Condition:
              StringEquals:
                'cloudwatch:namespace': 'EconoVault/Application'

  # IAM Group for Security Team
  SecurityTeamGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "econovault-security-team-${Environment}"
      ManagedPolicyArns:
        - !Ref SecurityTeamPolicy
      Policies:
        - PolicyName: AssumeSecurityRoles
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'sts:AssumeRole'
                Resource:
                  - !GetAtt SecurityAuditRole.Arn
                  - !GetAtt PCIComplianceRole.Arn

  # IAM Group for Developers
  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "econovault-developers-${Environment}"
      ManagedPolicyArns:
        - !Ref DeveloperPolicy

  # IAM Group for Database Administrators
  DatabaseAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub "econovault-db-admins-${Environment}"
      Policies:
        - PolicyName: DatabaseAdminAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # RDS management
              - Effect: Allow
                Action:
                  - 'rds:Describe*'
                  - 'rds:CreateDBSnapshot'
                  - 'rds:RestoreDBInstanceFromDBSnapshot'
                  - 'rds:ModifyDBInstance'
                  - 'rds:RebootDBInstance'
                  - 'rds:AddTagsToResource'
                  - 'rds:RemoveTagsFromResource'
                Resource:
                  - !Sub 'arn:aws:rds:${Region}:${AccountId}:db:*'
                  - !Sub 'arn:aws:rds:${Region}:${AccountId}:cluster:*'
                  - !Sub 'arn:aws:rds:${Region}:${AccountId}:snapshot:*'
                Condition:
                  StringEquals:
                    'rds:ResourceTag/Environment': !Ref Environment
              
              # Database backup management
              - Effect: Allow
                Action:
                  - 'backup:CreateBackupPlan'
                  - 'backup:CreateBackupVault'
                  - 'backup:StartBackupJob'
                  - 'backup:DescribeBackupJob'
                  - 'backup:ListBackupJobs'
                Resource: '*'

Outputs:
  ECSTaskExecutionRoleArn:
    Description: "ARN of the ECS task execution role"
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskExecutionRoleArn"
  
  ECSTaskRoleArn:
    Description: "ARN of the ECS task role"
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskRoleArn"
  
  RDSMonitoringRoleArn:
    Description: "ARN of the RDS monitoring role"
    Value: !If
      - IsProduction
      - !GetAtt RDSMonitoringRole.Arn
      - "Not applicable for non-production"
    Export:
      Name: !Sub "${AWS::StackName}-RDSMonitoringRoleArn"
  
  SecurityAuditRoleArn:
    Description: "ARN of the security audit role"
    Value: !If
      - HasAuditAccount
      - !GetAtt SecurityAuditRole.Arn
      - "Not configured"
    Export:
      Name: !Sub "${AWS::StackName}-SecurityAuditRoleArn"
  
  PCIComplianceRoleArn:
    Description: "ARN of the PCI compliance role"
    Value: !If
      - EnablePCIC
      - !GetAtt PCIComplianceRole.Arn
      - "Not enabled"
    Export:
      Name: !Sub "${AWS::StackName}-PCIComplianceRoleArn"
  
  SecurityTeamGroupName:
    Description: "Name of the security team group"
    Value: !Ref SecurityTeamGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityTeamGroupName"
  
  DeveloperGroupName:
    Description: "Name of the developer group"
    Value: !Ref DeveloperGroup
    Export:
      Name: !Sub "${AWS::StackName}-DeveloperGroupName"
  
  DatabaseAdminGroupName:
    Description: "Name of the database admin group"
    Value: !Ref DatabaseAdminGroup
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseAdminGroupName"
  
  ComplianceFrameworks:
    Description: "Compliance frameworks supported"
    Value: "SOC2 Type II, PCI DSS v3.2.1, NIST SP 800-53 Rev. 5, CIS AWS Foundations Benchmark"
    Export:
      Name: !Sub "${AWS::StackName}-ComplianceFrameworks"