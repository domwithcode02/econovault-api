# Render Staging Environment Configuration
# This configuration sets up a staging environment for pre-production testing

services:
  - type: web
    name: econovault-api-staging
    env: docker
    repo: https://github.com/domwithcode02/econovault-api  # Replace with your repo
    branch: develop  # Use develop branch for staging
    dockerContext: ./backend
    dockerfilePath: ./backend/Dockerfile
    # Staging configuration - balanced between cost and reliability
    numInstances: 1
    autoDeploy: true
    healthCheck:
      path: /health
      interval: 30
      timeout: 10
      restartPolicyType: on_failure
      maxRetries: 3
    # Staging environment variables
    envVars:
      # Database Configuration (Staging database)
      - key: DATABASE_URL
        fromDatabase:
          name: econovault-staging-db
          property: connectionString
      # Security Keys (generated by Render)
      - key: SECRET_KEY
        generateValue: true
      - key: MASTER_ENCRYPTION_KEY
        generateValue: true
      # Staging API Keys (can be real or test keys)
      - key: BLS_API_KEY
        sync: false  # Set via dashboard
      - key: BEA_API_KEY
        sync: false  # Set via dashboard
      - key: FRED_API_KEY
        sync: false  # Set via dashboard
      # Staging Configuration
      - key: ENVIRONMENT
        value: "staging"
      - key: DEBUG
        value: "false"
      - key: LOG_LEVEL
        value: "INFO"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: PYTHONDONTWRITEBYTECODE
        value: "1"
      - key: WAIT_FOR_DB
        value: "true"
      - key: RUN_MIGRATIONS
        value: "true"
      # Staging-specific settings
      - key: ENABLE_STAGING_MODE
        value: "true"
      - key: RATE_LIMIT_PER_MINUTE
        value: "300"  # Moderate rate limiting for staging
      - key: RATE_LIMIT_PER_HOUR
        value: "18000"
      - key: SECURE_HEADERS
        value: "true"
      - key: CORS_ORIGINS
        value: "https://staging.econovault.com,https://api-staging.econovault.com"
      - key: SHOW_ERROR_DETAILS
        value: "false"
      # Monitoring (medium retention for staging)
      - key: ENABLE_METRICS
        value: "true"
      - key: METRICS_RETENTION_DAYS
        value: "14"
      # Performance testing
      - key: ENABLE_PERFORMANCE_TESTING
        value: "true"
      - key: ENABLE_LOAD_TESTING_ENDPOINTS
        value: "true"
    # Medium disk for staging
    disk:
      name: econovault-staging-data
      mountPath: /app/data
      sizeGB: 20
    # Pre-deploy commands
    preDeployCommand: "python -c 'import asyncio; from database import init_db; asyncio.run(init_db())'"

# Staging database (standard plan)
databases:
  - name: econovault-staging-db
    databaseName: econovault_db
    user: econovault_db_user
    plan: standard  # Standard plan for staging
    postgresVersion: "15"
    highAvailability: false  # No HA needed for staging
    backupRetention: 14  # 14-day backup retention

# Environment groups for staging
envGroups:
  - name: econovault-staging
    envVars:
      - key: ENVIRONMENT
        value: staging
      - key: LOG_LEVEL
        value: INFO
      - key: ENABLE_STAGING_MODE
        value: "true"
      - key: ENABLE_PERFORMANCE_TESTING
        value: "true"

# Note: This staging environment provides:
# - Production-like configuration with relaxed limits
# - Real API integration (if keys are provided)
# - Performance and load testing capabilities
# - Medium resource allocation
# - Moderate data retention
# - Security features similar to production